package com.example.youngwoong

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.os.Bundle
import android.speech.RecognitionListener
import android.speech.RecognizerIntent
import android.speech.SpeechRecognizer
import android.speech.tts.TextToSpeech
import android.speech.tts.UtteranceProgressListener
import android.util.Log
import android.view.View
import android.view.animation.AlphaAnimation
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import androidx.activity.OnBackPressedCallback
import com.airbnb.lottie.LottieAnimationView
import kotlinx.coroutines.*
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject
import java.util.concurrent.TimeUnit
import java.util.*

class VoiceGuideActivity : AppCompatActivity() {

    private var isListening = false
    private lateinit var voiceButton: ImageView
    private lateinit var voiceAnimation: LottieAnimationView
    private lateinit var dimView: View
    private lateinit var textPrompt: TextView
    private lateinit var textUserMessage: TextView
    private lateinit var textBotMessage: TextView
    private var blinkAnimation: AlphaAnimation? = null
    private var loadingJob: Job? = null

    private lateinit var speechRecognizer: SpeechRecognizer
    private lateinit var speechIntent: Intent
    private lateinit var textToSpeech: TextToSpeech

    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(60, TimeUnit.SECONDS)
        .writeTimeout(60, TimeUnit.SECONDS)
        .build()

    private val jsonMediaType = "application/json; charset=utf-8".toMediaType()

    companion object {
        private const val TAG = "VoiceGuideActivity"
        private val BASE_URL = NetworkConfig.getLlmServerUrl()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_voice_guide)

        checkPermissions()
        setupSTT()
        setupTTS()

        voiceAnimation = findViewById(R.id.voice_animation)
        dimView = findViewById(R.id.dim_view)
        textPrompt = findViewById(R.id.text_prompt)
        textUserMessage = findViewById(R.id.text_user_message)
        textBotMessage = findViewById(R.id.text_bot_message)

        val backButton = findViewById<ImageView>(R.id.btn_back)
        val voiceButton = findViewById<ImageView>(R.id.btn_voice)

        // üîê ÎÇòÏ§ëÏóê Ï†úÏñ¥Î•º ÏúÑÌï¥ Î©§Î≤Ñ Î≥ÄÏàòÎ°ú Ï†ÄÏû•
        this.voiceButton = voiceButton

        // ‚úÖ Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú MainMenuÎ°ú Ïù¥Îèô
        backButton.setOnClickListener {
            applyAlphaEffect(it)
            val intent = Intent(this, MainMenuActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            startActivity(intent)
            overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
            finish()
        }

        // ‚úÖ Ìú¥ÎåÄÌè∞ Î¨ºÎ¶¨ Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº Ï≤òÎ¶¨
        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                val intent = Intent(this@VoiceGuideActivity, MainMenuActivity::class.java)
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
                startActivity(intent)
                overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
                finish()
            }
        })

        // ‚úÖ ÏùåÏÑ± Î≤ÑÌäº
        voiceButton.setOnClickListener {
            applyAlphaEffect(it)
            toggleListening(voiceButton)
        }
    }


    private fun checkPermissions() {
        val permissions = listOf(Manifest.permission.RECORD_AUDIO)
        val notGranted = permissions.filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }
        if (notGranted.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, notGranted.toTypedArray(), 1000)
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1000 && grantResults.any { it != PackageManager.PERMISSION_GRANTED }) {
            Toast.makeText(this, "üéôÔ∏è ÏùåÏÑ± Ïù∏Ïãù Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
            finish()
        }
    }

    private fun applyAlphaEffect(view: View) {
        view.alpha = 0.6f
        view.postDelayed({ view.alpha = 1.0f }, 100)
    }

    private fun returnToMainMenu() {
        val intent = Intent(this, MainMenuActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        startActivity(intent)
        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
        finish()
    }

    private fun toggleListening(button: ImageView) {
        isListening = !isListening

        if (isListening) {
            dimView.alpha = 0f
            dimView.visibility = View.VISIBLE
            dimView.animate().alpha(0.15f).setDuration(300).start()

            voiceAnimation.apply {
                alpha = 0f
                visibility = View.VISIBLE
                animate().alpha(1f).setDuration(300).withStartAction { playAnimation() }.start()
            }

            textPrompt.apply {
                visibility = View.VISIBLE
                text = "Îì£Í≥† ÏûàÏñ¥Ïöî..."
                setTextColor(Color.parseColor("#FFA000"))
                startBlinking(this)
            }

            speechRecognizer.startListening(speechIntent)
            button.setImageResource(R.drawable.btn_voice_stop)

        } else {
            dimView.animate().alpha(0f).setDuration(300).withEndAction {
                dimView.visibility = View.GONE
            }.start()

            voiceAnimation.animate().alpha(0f).setDuration(300).withEndAction {
                voiceAnimation.pauseAnimation()
                voiceAnimation.visibility = View.GONE
            }.start()

            textPrompt.apply {
                text = "ÌÑ∞ÏπòÎ°ú ÎåÄÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§"
                setTextColor(Color.parseColor("#000000"))
                stopBlinking(this)
            }

            speechRecognizer.stopListening()
            speechRecognizer.cancel()
            button.setImageResource(R.drawable.btn_voice_start)
        }
    }

    private fun startBlinking(view: View) {
        blinkAnimation = AlphaAnimation(1.0f, 0.0f).apply {
            duration = 600
            repeatMode = AlphaAnimation.REVERSE
            repeatCount = AlphaAnimation.INFINITE
        }
        view.startAnimation(blinkAnimation)
    }

    private fun stopBlinking(view: View) {
        blinkAnimation?.cancel()
        view.clearAnimation()
    }

    private fun setupSTT() {
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this)

        speechRecognizer.setRecognitionListener(object : RecognitionListener {
            override fun onReadyForSpeech(params: Bundle?) {}
            override fun onBeginningOfSpeech() {}
            override fun onRmsChanged(rmsdB: Float) {}
            override fun onBufferReceived(buffer: ByteArray?) {}
            override fun onEndOfSpeech() {}

            override fun onError(error: Int) {
                val errorMessage = when (error) {
                    SpeechRecognizer.ERROR_AUDIO -> "Ïò§ÎîîÏò§ Ïò§Î•ò"
                    SpeechRecognizer.ERROR_CLIENT -> "ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïò§Î•ò"
                    SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS -> "Í∂åÌïú Î∂ÄÏ°±"
                    SpeechRecognizer.ERROR_NETWORK -> "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò"
                    SpeechRecognizer.ERROR_NETWORK_TIMEOUT -> "ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÍ∞Ñ Ï¥àÍ≥º"
                    SpeechRecognizer.ERROR_NO_MATCH -> "ÏùåÏÑ± Ïù∏Ïãù Ïã§Ìå®"
                    SpeechRecognizer.ERROR_RECOGNIZER_BUSY -> "Ïù∏ÏãùÍ∏∞ ÏÇ¨Ïö© Ï§ë"
                    SpeechRecognizer.ERROR_SERVER -> "ÏÑúÎ≤Ñ Ïò§Î•ò"
                    SpeechRecognizer.ERROR_SPEECH_TIMEOUT -> "ÏùåÏÑ± ÏûÖÎ†• ÏãúÍ∞Ñ Ï¥àÍ≥º"
                    else -> "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò"
                }
                Log.e("STT", "‚ùå ÏùåÏÑ± Ïù∏Ïãù Ïò§Î•ò: $error ($errorMessage)")
                if (isListening) {
                    speechRecognizer.cancel()
                    speechRecognizer.startListening(speechIntent)
                } else {
                    runOnUiThread {
                        textPrompt.text = "ÌÑ∞ÏπòÎ°ú ÎåÄÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§"
                    }
                }
            }

            override fun onResults(results: Bundle?) {
                val result = results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)?.getOrNull(0)

                result?.let { userMessage ->
                    runOnUiThread {
                        isListening = false

                        dimView.animate().alpha(0f).setDuration(300).withEndAction {
                            dimView.visibility = View.GONE
                        }.start()

                        voiceAnimation.animate().alpha(0f).setDuration(300).withEndAction {
                            voiceAnimation.pauseAnimation()
                            voiceAnimation.visibility = View.GONE
                        }.start()

                        textPrompt.apply {
                            visibility = View.VISIBLE
                            setTextColor(Color.parseColor("#000000"))
                            stopBlinking(this)
                        }

                        findViewById<ImageView>(R.id.btn_voice).setImageResource(R.drawable.btn_voice_start)

                        textUserMessage.text = userMessage
                        startLoadingDots("ü§ñ Î°úÎ¥áÏù¥ ÏùëÎãµÌïòÍ≥† ÏûàÏäµÎãàÎã§", textPrompt)
                        textBotMessage.text = ""

                        voiceButton.isEnabled = false  // ‚úÖ Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
                    }
                    sendMessageToLLM(userMessage)
                }
            }

            override fun onPartialResults(partialResults: Bundle?) {}
            override fun onEvent(eventType: Int, params: Bundle?) {}
        })

        speechIntent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
            putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
            putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ko-KR")
            putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 1)
        }
    }

    private fun setupTTS() {
        textToSpeech = TextToSpeech(this) { status ->
            if (status == TextToSpeech.SUCCESS) {
                val koreaResult = textToSpeech.setLanguage(Locale.KOREA)
                if (koreaResult == TextToSpeech.LANG_MISSING_DATA || koreaResult == TextToSpeech.LANG_NOT_SUPPORTED) {
                    Toast.makeText(this, "TTS Ïñ∏Ïñ¥ ÏÑ§Ï†ï Ïã§Ìå®", Toast.LENGTH_SHORT).show()
                }
                textToSpeech.setSpeechRate(0.9f)
                textToSpeech.setPitch(1.0f)
            }
        }

        textToSpeech.setOnUtteranceProgressListener(object : UtteranceProgressListener() {
            override fun onStart(utteranceId: String?) {}
            override fun onDone(utteranceId: String?) {
                runOnUiThread {
                    voiceButton.isEnabled = true // ‚úÖ TTS ÎÅùÎÇòÎ©¥ Îã§Ïãú Î≤ÑÌäº ÌôúÏÑ±Ìôî
                }
            }

            override fun onError(utteranceId: String?) {}
        })
    }

    private fun sendMessageToLLM(message: String) {
        lifecycleScope.launch {
            try {
                val response = sendMessageToServer(message)
                runOnUiThread {
                    stopLoadingDots()
                    textBotMessage.text = response
                    textPrompt.text = "ÌÑ∞ÏπòÎ°ú ÎåÄÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§"
                    speakResponse(response)
                }
            } catch (e: Exception) {
                Log.e(TAG, "LLM Ïò§Î•ò: ${e.message}")
                runOnUiThread {
                    stopLoadingDots()
                    textBotMessage.text = "Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§."
                    textPrompt.text = "ÌÑ∞ÏπòÎ°ú ÎåÄÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§"
                    speakResponse("Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§.")
                }
            }
        }
    }

    private suspend fun sendMessageToServer(message: String): String = withContext(Dispatchers.IO) {
        val jsonBody = JSONObject().apply { put("message", message) }
        val request = Request.Builder()
            .url("$BASE_URL/api/chat")
            .post(jsonBody.toString().toRequestBody(jsonMediaType))
            .build()
        val response = client.newCall(request).execute()
        if (response.isSuccessful) {
            val body = response.body?.string()
            val reply = JSONObject(body ?: "{}").optString("response", "ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§.")
            return@withContext reply
        } else {
            return@withContext "ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
        }
    }

    private fun speakResponse(text: String) {
        if (::textToSpeech.isInitialized) {
            textToSpeech.speak(text, TextToSpeech.QUEUE_FLUSH, null, "response_utterance")
        }
    }

    private fun startLoadingDots(baseText: String, textView: TextView) {
        loadingJob?.cancel()
        loadingJob = lifecycleScope.launch {
            var dotCount = 0
            while (isActive) {
                val dots = ".".repeat(dotCount % 4)
                textView.text = baseText + dots
                dotCount++
                delay(500)
            }
        }
    }

    private fun stopLoadingDots() {
        loadingJob?.cancel()
        loadingJob = null
    }

    override fun onDestroy() {
        super.onDestroy()
        speechRecognizer.destroy()
        if (::textToSpeech.isInitialized) {
            textToSpeech.stop()
            textToSpeech.shutdown()
        }
        stopLoadingDots()
    }
}
