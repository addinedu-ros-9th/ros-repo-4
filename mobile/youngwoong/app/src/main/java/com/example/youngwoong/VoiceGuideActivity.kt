package com.example.youngwoong

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.os.*
import android.os.Bundle
import android.speech.RecognitionListener
import android.speech.RecognizerIntent
import android.speech.SpeechRecognizer
import android.speech.tts.TextToSpeech
import android.speech.tts.UtteranceProgressListener
import android.util.Log
import android.view.View
import android.view.animation.AlphaAnimation
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import androidx.activity.OnBackPressedCallback
import com.airbnb.lottie.LottieAnimationView
import kotlinx.coroutines.*
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject
import java.io.IOException
import java.util.concurrent.TimeUnit
import java.util.*

data class LLMResult(
    val reply: String,
    val functionName: String,
    val selectedText: String?,   // ‚Üê Ïó¨Í∏∞ Îã¥ÏïÑÏ§Ñ Í≤É
    val statusCode: Int          // ‚Üê 200 Ï≤¥ÌÅ¨Ïö©
)

class VoiceGuideActivity : AppCompatActivity() {

    private var isListening = false
    private var pendingFunctionName: String? = null
    private lateinit var voiceButton: ImageView
    private lateinit var voiceAnimation: LottieAnimationView
    private lateinit var dimView: View
    private lateinit var textPrompt: TextView
    private lateinit var textUserMessage: TextView
    private lateinit var textBotMessage: TextView
    private var blinkAnimation: AlphaAnimation? = null
    private var loadingJob: Job? = null
    private lateinit var streamer: AndroidStreamer
    private var pendingSelectedText: String? = null
    private var pendingStatusCode: Int? = null

    private val timeoutHandler = Handler(Looper.getMainLooper())
    private val timeoutRunnable = Runnable {
        Log.d(TAG, "üïí VoiceGuideActivity 30Ï¥à ÌÉÄÏûÑÏïÑÏõÉ Î∞úÏÉù")
        disableInteraction()
        sendTimeoutAlert()
        navigateToMain()
    }

    private lateinit var speechRecognizer: SpeechRecognizer
    private lateinit var speechIntent: Intent
    private lateinit var textToSpeech: TextToSpeech

    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(60, TimeUnit.SECONDS)
        .writeTimeout(60, TimeUnit.SECONDS)
        .build()

    private val jsonMediaType = "application/json; charset=utf-8".toMediaType()

    companion object {
        private const val TAG = "VoiceGuideActivity"
        private val BASE_URL = NetworkConfig.getLlmServerUrl()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_voice_guide)

        streamer = AndroidStreamer(debugMode = true)

        checkPermissions()
        setupSTT()
        setupTTS()

        voiceAnimation = findViewById(R.id.voice_animation)
        dimView = findViewById(R.id.dim_view)
        textPrompt = findViewById(R.id.text_prompt)
        textUserMessage = findViewById(R.id.text_user_message)
        textBotMessage = findViewById(R.id.text_bot_message)

        val backButton = findViewById<ImageView>(R.id.btn_back)
        val voiceButton = findViewById<ImageView>(R.id.btn_voice)

        // üîê ÎÇòÏ§ëÏóê Ï†úÏñ¥Î•º ÏúÑÌï¥ Î©§Î≤Ñ Î≥ÄÏàòÎ°ú Ï†ÄÏû•
        this.voiceButton = voiceButton

        // ‚úÖ Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú MainMenuÎ°ú Ïù¥Îèô
        backButton.setOnClickListener {
            applyAlphaEffect(it)
            val intent = Intent(this, MainMenuActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            startActivity(intent)
            overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
            finish()
        }

        // ‚úÖ Ìú¥ÎåÄÌè∞ Î¨ºÎ¶¨ Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº Ï≤òÎ¶¨
        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                val intent = Intent(this@VoiceGuideActivity, MainMenuActivity::class.java)
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
                startActivity(intent)
                overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
                finish()
            }
        })

        // ‚úÖ ÏùåÏÑ± Î≤ÑÌäº
        voiceButton.setOnClickListener {
            applyAlphaEffect(it)
            toggleListening(voiceButton)
        }

        resetTimeoutTimer()
    }


    private fun checkPermissions() {
        val permissions = listOf(Manifest.permission.RECORD_AUDIO)
        val notGranted = permissions.filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }
        if (notGranted.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, notGranted.toTypedArray(), 1000)
        }
    }

    override fun onUserInteraction() {
        super.onUserInteraction()
        resetTimeoutTimer()
    }

    override fun onResume() {
        super.onResume()
        window.decorView.systemUiVisibility =
            View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY or
                    View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or
                    View.SYSTEM_UI_FLAG_FULLSCREEN
        resetTimeoutTimer()
    }

    override fun onPause() {
        super.onPause()
        timeoutHandler.removeCallbacks(timeoutRunnable)
    }

    private fun resetTimeoutTimer() {
        timeoutHandler.removeCallbacks(timeoutRunnable)
        timeoutHandler.postDelayed(timeoutRunnable, 30_000) // 30Ï¥à
    }

    private fun disableInteraction() {
        runOnUiThread {
            voiceButton.isEnabled = false
            findViewById<ImageView>(R.id.btn_back).isEnabled = false
            dimView.isClickable = true
        }
    }

    private fun sendTimeoutAlert() {
        val url = NetworkConfig.getTimeoutAlertUrl()
        val json = JSONObject().apply { put("robot_id", 3) }
        val body = json.toString().toRequestBody(jsonMediaType)
        val request = Request.Builder().url(url).post(body).build()
        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                Log.e(TAG, "‚ùå Timeout Ï†ÑÏÜ° Ïã§Ìå®: ${e.message}")
            }
            override fun onResponse(call: Call, response: Response) {
                Log.d(TAG, "‚úÖ Timeout Ï†ÑÏÜ° ÏÑ±Í≥µ: ${response.code}")
            }
        })
    }

    private fun navigateToMain() {
        val intent = Intent(this, MainActivity::class.java).apply {
            putExtra("from_timeout", true)
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        startActivity(intent)
        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
        finish()
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 1000 && grantResults.any { it != PackageManager.PERMISSION_GRANTED }) {
            Toast.makeText(this, "üéôÔ∏è ÏùåÏÑ± Ïù∏Ïãù Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
            finish()
        }
    }

    private fun applyAlphaEffect(view: View) {
        view.alpha = 0.6f
        view.postDelayed({ view.alpha = 1.0f }, 100)
    }

    private fun returnToMainMenu() {
        val intent = Intent(this, MainMenuActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        startActivity(intent)
        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
        finish()
    }

    private fun toggleListening(button: ImageView) {
        isListening = !isListening

        if (isListening) {
            dimView.alpha = 0f
            dimView.visibility = View.VISIBLE
            dimView.animate().alpha(0.15f).setDuration(300).start()

            voiceAnimation.apply {
                alpha = 0f
                visibility = View.VISIBLE
                animate().alpha(1f).setDuration(300).withStartAction { playAnimation() }.start()
            }

            textPrompt.apply {
                visibility = View.VISIBLE
                text = "Îì£Í≥† ÏûàÏñ¥Ïöî..."
                setTextColor(Color.parseColor("#FFA000"))
                startBlinking(this)
            }

            speechRecognizer.startListening(speechIntent)
            button.setImageResource(R.drawable.btn_voice_stop)

        } else {
            dimView.animate().alpha(0f).setDuration(300).withEndAction {
                dimView.visibility = View.GONE
            }.start()

            voiceAnimation.animate().alpha(0f).setDuration(300).withEndAction {
                voiceAnimation.pauseAnimation()
                voiceAnimation.visibility = View.GONE
            }.start()

            textPrompt.apply {
                text = "ÌÑ∞ÏπòÎ°ú ÎåÄÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§"
                setTextColor(Color.parseColor("#000000"))
                stopBlinking(this)
            }

            speechRecognizer.stopListening()
            speechRecognizer.cancel()
            button.setImageResource(R.drawable.btn_voice_start)
        }
    }

    private fun startBlinking(view: View) {
        blinkAnimation = AlphaAnimation(1.0f, 0.0f).apply {
            duration = 600
            repeatMode = AlphaAnimation.REVERSE
            repeatCount = AlphaAnimation.INFINITE
        }
        view.startAnimation(blinkAnimation)
    }

    private fun stopBlinking(view: View) {
        blinkAnimation?.cancel()
        view.clearAnimation()
    }

    private fun setupSTT() {
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this)

        speechRecognizer.setRecognitionListener(object : RecognitionListener {
            override fun onReadyForSpeech(params: Bundle?) {}
            override fun onBeginningOfSpeech() {
                resetTimeoutTimer()
            }
            override fun onRmsChanged(rmsdB: Float) {}
            override fun onBufferReceived(buffer: ByteArray?) {}
            override fun onEndOfSpeech() {}

            override fun onError(error: Int) {
                val errorMessage = when (error) {
                    SpeechRecognizer.ERROR_AUDIO -> "Ïò§ÎîîÏò§ Ïò§Î•ò"
                    SpeechRecognizer.ERROR_CLIENT -> "ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïò§Î•ò"
                    SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS -> "Í∂åÌïú Î∂ÄÏ°±"
                    SpeechRecognizer.ERROR_NETWORK -> "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò"
                    SpeechRecognizer.ERROR_NETWORK_TIMEOUT -> "ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÍ∞Ñ Ï¥àÍ≥º"
                    SpeechRecognizer.ERROR_NO_MATCH -> "ÏùåÏÑ± Ïù∏Ïãù Ïã§Ìå®"
                    SpeechRecognizer.ERROR_RECOGNIZER_BUSY -> "Ïù∏ÏãùÍ∏∞ ÏÇ¨Ïö© Ï§ë"
                    SpeechRecognizer.ERROR_SERVER -> "ÏÑúÎ≤Ñ Ïò§Î•ò"
                    SpeechRecognizer.ERROR_SPEECH_TIMEOUT -> "ÏùåÏÑ± ÏûÖÎ†• ÏãúÍ∞Ñ Ï¥àÍ≥º"
                    else -> "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò"
                }
                Log.e("STT", "‚ùå ÏùåÏÑ± Ïù∏Ïãù Ïò§Î•ò: $error ($errorMessage)")
                if (isListening) {
                    speechRecognizer.cancel()
                    speechRecognizer.startListening(speechIntent)
                } else {
                    runOnUiThread {
                        textPrompt.text = "ÌÑ∞ÏπòÎ°ú ÎåÄÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§"
                    }
                }
            }

            override fun onResults(results: Bundle?) {
                val result = results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)?.getOrNull(0)

                result?.let { userMessage ->
                    runOnUiThread {
                        isListening = false

                        dimView.animate().alpha(0f).setDuration(300).withEndAction {
                            dimView.visibility = View.GONE
                        }.start()

                        voiceAnimation.animate().alpha(0f).setDuration(300).withEndAction {
                            voiceAnimation.pauseAnimation()
                            voiceAnimation.visibility = View.GONE
                        }.start()

                        textPrompt.apply {
                            visibility = View.VISIBLE
                            setTextColor(Color.parseColor("#000000"))
                            stopBlinking(this)
                        }

                        findViewById<ImageView>(R.id.btn_voice).setImageResource(R.drawable.btn_voice_start)

                        textUserMessage.text = userMessage
                        startLoadingDots("ü§ñ Î°úÎ¥áÏù¥ ÏùëÎãµÌïòÍ≥† ÏûàÏäµÎãàÎã§", textPrompt)
                        textBotMessage.text = ""

                        voiceButton.isEnabled = false  // ‚úÖ Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
                    }
                    resetTimeoutTimer()
                    sendMessageToLLM(userMessage)
                }
            }

            override fun onPartialResults(partialResults: Bundle?) {}
            override fun onEvent(eventType: Int, params: Bundle?) {}
        })

        speechIntent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
            putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
            putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ko-KR")
            putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 1)
        }
    }

    private fun setupTTS() {
        textToSpeech = TextToSpeech(this) { status ->
            if (status == TextToSpeech.SUCCESS) {
                val result = textToSpeech.setLanguage(Locale.KOREA)
                textToSpeech.setSpeechRate(0.9f)
                textToSpeech.setPitch(1.0f)

                // ‚úÖ TTS Ï¥àÍ∏∞Ìôî ÌõÑ Ìò∏Ï∂ú Ïó¨Î∂Ä ÌôïÏù∏
                if (intent.getBooleanExtra("voice_triggered", false)) {
                    speakResponse("Î≥ëÏõê ÏïàÎÇ¥ Î°úÎ¥á ÏòÅÏõÖÏù¥ ÏûÖÎãàÎã§. Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?")
                }

            } else {
                Toast.makeText(this, "TTS Ï¥àÍ∏∞Ìôî Ïã§Ìå®", Toast.LENGTH_SHORT).show()
            }
        }
        textToSpeech.setOnUtteranceProgressListener(object : UtteranceProgressListener() {
            override fun onStart(utteranceId: String?) {}
            override fun onDone(utteranceId: String?) {
                runOnUiThread {
                    voiceButton.isEnabled = true
                    val patientId = intent.getStringExtra("patient_id") ?: "unknown"

                    when (pendingFunctionName) {
                        "appointment_service" -> {
                            startActivity(Intent(this@VoiceGuideActivity, AuthenticationActivity::class.java))
                            overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
                            finish()
                        }
                        "navigate" -> {
                            if (pendingStatusCode == 200) {
                                val dest = (pendingSelectedText?.takeIf { it.isNotBlank() }) ?: "Î≥ëÏõê Î°úÎπÑ"
                                val i = Intent(this@VoiceGuideActivity, GuidanceWaitingActivity::class.java).apply {
                                    putExtra("selected_text", dest)
                                    putExtra("isFromCheckin", false)
                                    putExtra("patient_id", patientId)
                                }
                                startActivity(i)
                                overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
                                finish()
                            } else {
                                Log.w(TAG, "navigate Ïã§Ìå®(status=$pendingStatusCode) ‚Üí ÌôîÎ©¥ Ïù¥Îèô Ïïà Ìï®")
                                // ÌïÑÏöîÌïòÎ©¥ Toast ÌëúÏãú:
                                // Toast.makeText(this@VoiceGuideActivity, "Î™©Ï†ÅÏßÄÎ•º Îã§Ïãú ÎßêÏîÄÌï¥ Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
                            }
                        }
                    }
                    pendingFunctionName = null
                    pendingSelectedText = null
                    pendingStatusCode = null
                }
            }
            override fun onError(utteranceId: String?) {}
        })
    }

    private fun sendMessageToLLM(message: String) {
        lifecycleScope.launch {
            try {
                val result = sendMessageToServer(message)

                withContext(Dispatchers.Main) {
                    stopLoadingDots()

                    // Îπà ÏùëÎãµ ÎåÄÎπÑ
                    val replyText = result.reply.ifBlank { "ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§." }
                    textBotMessage.text = replyText
                    textPrompt.text = "ÌÑ∞ÏπòÎ°ú ÎåÄÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§"

                    // Îã§Ïùå ÌôîÎ©¥ Î∂ÑÍ∏∞Î•º ÏúÑÌïú ÏÉÅÌÉú Î≥¥Í¥Ä
                    pendingFunctionName = result.functionName.ifBlank { null }
                    pendingSelectedText = result.selectedText
                        ?.takeIf { it.isNotBlank() }
                        ?: textUserMessage.text?.toString()?.takeIf { it.isNotBlank() }

                    // (ÏòµÏÖò) ÏÉÅÌÉúÏΩîÎìú Î≥¥Í¥Ä ‚Üí onDoneÏóêÏÑú 200 Ï≤¥ÌÅ¨Ïö©
                    pendingStatusCode = result.statusCode

                    // ÌôîÎ©¥ Ï†ÑÌôòÏùÄ Ïò§ÏßÅ TTS onDoneÏóêÏÑú Ï≤òÎ¶¨
                    speakResponse(replyText)
                }
            } catch (e: Exception) {
                Log.e(TAG, "LLM Ïò§Î•ò: ${e.message}", e)
                withContext(Dispatchers.Main) {
                    stopLoadingDots()
                    val err = "Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§."
                    textBotMessage.text = err
                    textPrompt.text = "ÌÑ∞ÏπòÎ°ú ÎåÄÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§"

                    // Ïã§Ìå® Ïãú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï∞®Îã®
                    pendingFunctionName = null
                    pendingSelectedText = null
                    pendingStatusCode = null

                    speakResponse(err)
                }
            }
        }
    }



    private suspend fun sendMessageToServer(message: String): LLMResult = withContext(Dispatchers.IO) {
        val jsonBody = JSONObject().apply { put("message", message) }
        val request = Request.Builder()
            .url("$BASE_URL/api/chat")
            .post(jsonBody.toString().toRequestBody(jsonMediaType))
            .build()

        val response = client.newCall(request).execute()
        val bodyString = response.body?.string()
        Log.d(TAG, "üì¶ LLM ÏõêÏãú ÏùëÎãµ: $bodyString")

        if (response.isSuccessful && !bodyString.isNullOrBlank()) {
            try {
                val json = JSONObject(bodyString)

                val functionName = json.optString("function_name",
                    json.optString("function", ""))

                // Í∏∞Î≥∏Í∞í(Î£®Ìä∏ Í∏∞Ï§Ä)
                var statusCode = json.optInt("status_code", response.code)
                var selectedText: String? = json.optString("target", null)
                var reply = json.optString("response", "")

                // ‚úÖ function_result Ïö∞ÏÑ† Î∞òÏòÅ
                val fnRes = json.opt("function_result")
                if (fnRes is JSONObject) {
                    statusCode = fnRes.optInt("status_code", statusCode)
                    selectedText = fnRes.optString("selected_text", null)
                        ?: fnRes.optString("target", null)
                                ?: fnRes.optString("destination", null)
                                ?: selectedText

                    val resultField = fnRes.opt("result")
                    when (resultField) {
                        is String -> if (statusCode != 200 || reply.isBlank()) reply = resultField
                        is JSONObject -> {
                            val msg = resultField.optString("message", "")
                            if (msg.isNotBlank() && (statusCode != 200 || reply.isBlank())) reply = msg
                        }
                    }
                }

                if (reply.isBlank()) reply = "ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§."
                return@withContext LLMResult(reply, functionName, selectedText, statusCode)

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå JSON ÌååÏã± Ïò§Î•ò: ${e.message}")
                return@withContext LLMResult("ÏùëÎãµ ÌååÏã± Ïò§Î•ò", "", null, response.code)
            }
        } else {
            Log.e(TAG, "‚ùå ÏÑúÎ≤Ñ ÏùëÎãµ Ïò§Î•ò: ${response.code}")
            return@withContext LLMResult("ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", "", null, response.code)
        }
    }

    private fun speakResponse(text: String) {
        if (!::textToSpeech.isInitialized) return
        resetTimeoutTimer()
        // Î¶¨Ïä§ÎÑàÎäî setupTTS()ÏóêÏÑúÎßå ÏÑ§Ï†ïÌï©ÎãàÎã§.
        // (ÏõêÌïúÎã§Î©¥ Ïó¨Í∏∞ÏÑú Î≤ÑÌäºÎßå Ïû†Íπê ÎπÑÌôúÏÑ±Ìôî)
        // voiceButton.isEnabled = false
        textToSpeech.speak(text, TextToSpeech.QUEUE_FLUSH, null, "response_utterance")
    }


    private fun startLoadingDots(baseText: String, textView: TextView) {
        loadingJob?.cancel()
        loadingJob = lifecycleScope.launch {
            var dotCount = 0
            while (isActive) {
                val dots = ".".repeat(dotCount % 4)
                textView.text = baseText + dots
                dotCount++
                delay(500)
            }
        }
    }

    private fun stopLoadingDots() {
        loadingJob?.cancel()
        loadingJob = null
    }

    override fun onDestroy() {
        super.onDestroy()
        timeoutHandler.removeCallbacks(timeoutRunnable)
        speechRecognizer.destroy()
        if (::textToSpeech.isInitialized) {
            textToSpeech.stop()
            textToSpeech.shutdown()
        }
        stopLoadingDots()
    }
}
